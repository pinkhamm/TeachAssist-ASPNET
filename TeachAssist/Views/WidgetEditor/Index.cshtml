@{
    ViewData["Title"] = "Widget Editor";
}

@section Scripts {

    <script src="~/js/JQuery/jquery-1.12.4.js"></script>
    <script src="~/js/JQuery/jquery-ui.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jsPlumb/2.0.7/jsPlumb.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jquery.appendgrid@2/dist/AppendGrid.js"></script>

    <script>
        //Drag and drop elements from the sidebar code

        //Global variables for ID iteration on html elements

        $table_iteration = 0;
        $widget_iteration = 0;


        jsPlumb.setContainer($("body"));

        jsPlumb.ready(function () {
            // Make Widget helpers draggable
            $(".sidebar_widget").draggable({
                helper: "clone",
                revert: "invalid",
                appendTo: "#widget-editor-area",
                cursor: "move",
                drag: function () {
                    jsPlumb.repaintEverything();
                    console.log("jsplumb repainting");
                    //jsPlumb.repaint($(this)); 

                },
                start: function () {
                    console.log("dragging");
                },
                stop: function () {
                    console.log('stopped');
                },
            });






            // Make the Widget editor area droppable
            $("#widget-editor-area").droppable({
                accept: ".sidebar_widget",
                drop: function (event, ui) {


                    var $WidgetID = "widget-" + $widget_iteration;

                    if (ui.draggable.hasClass("sidebar_widget")) {
                        var $item = $(ui.draggable).clone().attr('id', $WidgetID).appendTo("#widget-editor-area").css({
                            position: 'absolute',
                        });

                        

                        $widget_iteration += 1;

                        drawEndPoints($WidgetID, "Left");


                        $item.removeClass("sidebar_widget");
                        makeDraggable($item);
                    }

                    function makeDraggable($item) {
                        $item.draggable({
                            cursor: "move",
                            grid: [20, 20],
                            containment: "#widget-editor-area",
                            drag: function () {
                                jsPlumb.repaintEverything();
                                console.log("jsplumb repainting");
                                //jsPlumb.repaint($(this)); 

                            },
                            start: function () { },
                            stop: function () {
                                console.log('stopped')
                            }
                        });
                    }
                }
            });
        })

        //End of drag and drop element code

        //Create a new Table Code
        function createTable() {
            // Create element id based on current iteration
            var $TableID = "widget-table-" + $table_iteration;

            // Create the HTML table element with the Element ID we made above
            var $table = $('<table class="WidgetTable" id="' + $TableID + '"></table > ');

            // Add the HTML table to the widget editor
            $table.appendTo('#widget-editor-area');

            // Update the iteration count for the next table
            $table_iteration += 1;

            drawEndPoints($TableID, "Right");


            // Make the table draggable and contain it to the widget editor
            $($table).draggable({
                containment: "#widget-editor-area",
                cursor: "move",
                grid: [20, 20],
                drag: function () {
                    jsPlumb.repaintEverything();
                    console.log("jsplumb repainting");
                    //jsPlumb.repaint($(this)); 

                }
            })
            

            // Apend the grid information to the table element
            var myAppendGrid = new AppendGrid({
                element: $TableID,
                columns: [
                    { name: "s_name", display: "Student Name", value: "Enter a name..." },
                    { name: "s_course", display: "Course" },
                    { name: "s_grade", display: "Grade" }
                ],
                afterRowAppended: function (caller, parentRowIndex, addedRowIndex) {
                    // Make sure AppendGrid is initialized
                    if (myAppendGrid) {
                        // Copy data of `Foo` from parent row to new added rows
                        var parentValue = myAppendGrid.getCtrlValue("s_name", parentRowIndex);
                        for (var z = 0; z < addedRowIndex.length; z++) {
                            myAppendGrid.setCtrlValue("s_name", addedRowIndex[z], parentValue);
                        }
                    }
                }
            });
        }


        function drawEndPoints(id, endpointposition) {

            var endpointOptions = {
                isSource: true,
                isTarget: true,
                endpoint: ["Rectangle", {
                    radius: 20
                }],
                style: {
                    fillStyle: 'grey'

                },
                maxConnections: -1,
                connector: "Bezier",
                connectorStyle: {
                    lineWidth: 5,
                    strokeStyle: 'blue'
                },
                scope: "blackline",
                dropOptions: {
                    drop: function (e, ui) {
                        alert('drop!');
                    }
                }
            };

            jsPlumb.addEndpoint($("#" + id), {
                anchor: endpointposition
            }, endpointOptions);
        }


    </script>

}

<div id="action-menu">
    <button id="cancel_widget_btn" onclick="window.location = '@Url.Action("Index", "Dashboard")'">Cancel</button>
    <button id="save_widget_btn" onclick="window.location = '@Url.Action("SaveWidget", "WidgetEditor")'">Save Widget</button>
    <!-- Confirm with user first before deleting -->
    <button id="delete_widget_btn" onclick="window.location = '@Url.Action("DeleteWidget", "WidgetEditor")'">Delete Widget</button>

    <!--Table creator HTML-->
    <div id="create_new_table_form">
        <fieldset>
            <legend>Table Creator</legend>
            <div class="control_group">
                <label for="horizontal-spinner" class="ui-controlgroup-label">Name of Table: </label>
                <input id="horizontal-spinner" class="ui-spinner-input">
                <button id="new_table_btn" onclick="createTable()">Create Table</button>
            </div>
        </fieldset>
    </div>
</div>


<div id="widget-editor">
    <div id="widget-editor-area">
        <!--This is the default table look when the create new table button is clicked -->
        @*<table id="default_table">
                <caption>Name of Table</caption>
                <tr>
                    <th>Student</th>
                    <th>Course</th>
                    <th>Grade</th>
                    <th>Value</th>
                </tr>
            </table>*@

    </div>
    <div id="widget-editor-side-bar">
        <img class="sidebar_widget" id="add_output_btn" src="~/Images/addoutput.png" alt="addOutput_btn">
        <img class="sidebar_widget" id="avg_output_btn" src="~/Images/avgoutput.png" alt="avgOutput_btn">
        <img class="sidebar_widget" id="bar_graph_btn" src="~/Images/bargraph.png" alt="barGraph_btn">
        <img class="sidebar_widget" id="pie_chart_btn" src="~/Images/piechart.png" alt="pieChart_btn">
    </div>

</div>
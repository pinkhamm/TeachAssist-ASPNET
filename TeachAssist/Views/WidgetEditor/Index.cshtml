@{
    ViewData["Title"] = "Widget Editor";
}

@section Scripts {

    <script src="~/js/JQuery/jquery-1.12.4.js"></script>
    <script src="~/js/JQuery/jquery-ui.js"></script>
    <script src="~/js/JQuery/Plugins/jsPlumb.min.js"></script>
    <script src="~/js/JQuery/Plugins/AppendGrid.js"></script>

    <script>
        //Drag and drop elements from the sidebar code

        //Global variables for ID iteration on html elements

        $table_iteration = 0;
        $widget_iteration = 0;
        var myAppendGrid = [];


        jsPlumb.setContainer($("body"));

        jsPlumb.ready(function () {
            // Make Widget helpers draggable
            $(".sidebar_widget").draggable({
                helper: "clone",
                revert: "invalid",
                appendTo: "#widget-editor-area",
                cursor: "move",
                drag: function () {
                    jsPlumb.repaintEverything();
                    console.log("jsplumb repainting");
                    //jsPlumb.repaint($(this));

                },
                start: function () {
                    console.log("dragging");
                },
                stop: function () {
                    console.log('stopped');
                },
            });






            // Make the Widget editor area droppable
            $("#widget-editor-area").droppable({
                accept: ".sidebar_widget",
                drop: function (event, ui) {


                    var $WidgetID = "widget-" + $widget_iteration;

                    if (ui.draggable.hasClass("sidebar_widget")) {
                        var $item = $(ui.draggable).clone().attr('id', $WidgetID).appendTo("#widget-editor-area").css({
                            position: 'absolute',
                        });



                        $widget_iteration += 1;

                        drawEndPoints($WidgetID, "Left", false);


                        $item.removeClass("sidebar_widget");
                        makeDraggable($item);
                    }

                    function makeDraggable($item) {
                        $item.draggable({
                            cursor: "move",
                            grid: [20, 20],
                            containment: "#widget-editor-area",
                            drag: function () {
                                jsPlumb.repaintEverything();
                                console.log("jsplumb repainting");

                            },
                            start: function () { },
                            stop: function () {
                                console.log('stopped')
                            }
                        });



                        $item.hover(function () {
                            $(this).toggleClass('active'); // if hovered then it has class active
                            console.log("ID: " + $(".active").attr('id'));
                        });

                        $(document).keyup(function (e) {
                            if (e.which == 46) {
                                jsPlumb.remove($(".active").attr('id'));
                            }
                        });


                    }
                }
            });
        })

        //End of drag and drop element code

        //Create a new Table Code
        function createTable() {
            // Create element id based on current iteration
            var $TableID = "widget-table-" + $table_iteration;

            // Create the HTML table element with the Element ID we made above
            var $table = $('<table class="WidgetTable" id="' + $TableID + '"></table > ');

            // Add the HTML table to the widget editor
            $table.appendTo('#widget-editor-area');

            drawEndPoints($TableID, "Right", true);


            // Make the table draggable and contain it to the widget editor
            $($table).draggable({
                containment: "#widget-editor-area",
                cursor: "move",
                grid: [20, 20],
                drag: function () {
                    jsPlumb.repaintEverything();
                    console.log("jsplumb repainting");
                    //jsPlumb.repaint($(this));

                }
            });


            $('.WidgetTable').hover(function () {
                $(this).toggleClass('active'); // if hovered then it has class active
                console.log("ID: " + $(".active").attr('id'));

            });

            $(document).keyup(function (e) {
                if (e.which == 46) {
                    jsPlumb.remove($(".active").attr('id'));
                }
            });


            // Apend the grid information to the table element
            myAppendGrid[$table_iteration] = new AppendGrid({
                element: $TableID,
                columns: [
                    { name: "s_name", display: "Student Name", value: "Enter a name..." },
                    { name: "s_course", display: "Course" },
                    { name: "s_grade", display: "Grade" }
                ],
                afterRowAppended: function (caller, parentRowIndex, addedRowIndex) {
                    // Make sure AppendGrid is initialized
                    if (myAppendGrid[$table_iteration]) {
                        // Copy data of `Foo` from parent row to new added rows
                        var parentValue = myAppendGrid[$table_iteration].getCtrlValue("s_name", parentRowIndex);
                        for (var z = 0; z < addedRowIndex.length; z++) {
                            myAppendGrid[$table_iteration].setCtrlValue("s_name", addedRowIndex[z], parentValue);
                        }
                    }
                }



            });



            $(document).keyup(function (e) {
                if (e.which == 35) {
                    console.log("All output connections: ");
                    var con = jsPlumb.getAllConnections();
                    var list = [];
                    for (var i = 0; i < con.length; i++) {
                        list[i] = new Array(2);
                        var source = (list[i][0] = con[i].sourceId)
                        var target = (list[i][1] = con[i].targetId)
                        console.log(source + " -> " + target);

                        //console.log($("#" + source).getCtrlValue("s_grade",1) + " is connected.")
                        console.log(myAppendGrid[i].getCtrlValue("s_grade",1));
                    }


                }
            });

            // Update the iteration count for the next table
            $table_iteration += 1;

        }


        function drawEndPoints(id, endpointposition, isSource) {

            var endpointSource = {
                isSource: true,
                isTarget: false,
                endpoint: ["Rectangle", {
                    width: 40,
                    height: 40
                }],
                style: {
                    fillStyle: 'red'

                },
                maxConnections: -1,
                connector: "Bezier",
                connectorStyle: {
                    lineWidth: 5,
                    strokeStyle: '#040469'
                },
                scope: "blackline",
                dropOptions: {
                    drop: function (e, ui) {
                        $("#flashing_text").text('Unable to connect two tables together...');
                        $("#flashing_text").slideDown(function () {
                            setTimeout(function () {
                                $("#flashing_text").slideUp();
                            }, 2500);
                        });

                    }
                }
            };

            var endpointDestination = {
                isSource: false,
                isTarget: true,
                endpoint: ["Dot", {
                    radius: 15
                }],
                style: {
                    fillStyle: 'red'

                },
                maxConnections: 1,
                connector: "Bezier",
                connectorStyle: {
                    lineWidth: 5,
                    strokeStyle: '#040469'
                },
                scope: "blackline",
                dropOptions: {
                    drop: function (e, ui) {
                        $("#flashing_text").text('One table connection maximum...');
                        $("#flashing_text").slideDown(function () {
                            setTimeout(function () {
                                $("#flashing_text").slideUp();
                            }, 2500);
                        });
                    }
                }
            };

            if (isSource == true) {
                jsPlumb.addEndpoint($("#" + id), {
                    anchor: endpointposition
                }, endpointSource);
            } else if (isSource == false) {
                jsPlumb.addEndpoint($("#" + id), {
                    anchor: endpointposition
                }, endpointDestination);
            }
        }


    </script>
}

<div id="action-menu">
    <button id="cancel_widget_btn" onclick="window.location = '@Url.Action("Index", "Dashboard")'">Cancel</button>
    <button id="save_widget_btn" onclick="window.location = '@Url.Action("SaveWidget", "WidgetEditor")'">Save Widget</button>
    <!-- Confirm with user first before deleting -->
    <button id="delete_widget_btn" onclick="window.location = '@Url.Action("DeleteWidget", "WidgetEditor")'">Delete Widget</button>


    <!--Table creator HTML-->
    <div id="create_new_table_form">
        <fieldset>
            <legend>Table Creator</legend>
            <div class="control_group">
                <label for="horizontal-spinner" class="ui-controlgroup-label">Name of Table: </label>
                <input id="horizontal-spinner" class="ui-spinner-input">
                <button id="new_table_btn" onclick="createTable()">Create Table</button>
            </div>
        </fieldset>
    </div>
</div>

<p>Press the "delete" key to delete item</p>
<p>Press the "end" key to show all connections in console</p>

<p class="flashing_text_effect" id="flashing_text">placeholder</p>


<div id="widget-editor">
    <div id="widget-editor-area">
        <!--This is the default table look when the create new table button is clicked -->
        @*<table id="default_table">
                <caption>Name of Table</caption>
                <tr>
                    <th>Student</th>
                    <th>Course</th>
                    <th>Grade</th>
                    <th>Value</th>
                </tr>
            </table>*@

    </div>

    <div id="widget-editor-side-bar">

        <div class="sidebar_widget" id="add_output_btn">
            <img src="~/Images/addoutput.png" alt="addOutput_btn">
            <div class="sidebar_widget-value_box" id="add_output_value">add_output_value</div>
        </div>

        <div class="sidebar_widget" id="avg_output_btn">
            <img src="~/Images/avgoutput.png" alt="avgOutput_btn">
            <div class="sidebar_widget-value_box" id="avg_output_value">avg_output_value</div>
        </div>

        <div class="sidebar_widget" id="bar_graph_btn">
            <img src="~/Images/bargraph.png" alt="barGraph_btn">
            <div class="sidebar_widget-value_box" id="bargraph_value">bargraph_value</div>
        </div>

        <div class="sidebar_widget" id="pie_chart_btn">
            <img src="~/Images/piechart.png" alt="pieChart_btn">
            <div class="sidebar_widget-value_box" id="piechart_value">piechart_value</div>
        </div>

    </div>

</div>